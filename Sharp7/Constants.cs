///////////////////////////////////////////////////////////////////////////////
//
// <copyright file="$filename" company="AUP Lda.">
// (c) AUP Lda.
// </copyright>
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Sharp7.Constants
{
	internal static class Telegrams
	{
		#region Internal Fields

		internal const byte pduAlreadyStarted = 0x02;

		// CPU already in run mode
		internal const byte pduAlreadyStopped = 0x07;

		internal const byte pduStart = 0x28;

		// CPU start
		internal const byte pduStop = 0x29;

		internal static int HeaderSizeRead = 31;

		// Header Size when Reading
		internal static int HeaderSizeWrite = 35;

		internal static byte[] ISO_ConnectionRequestTelegram = {

			// TPKT (RFC1006 Header)
			0x03, // RFC 1006 ID (3)
			0x00, // Reserved, always 0
			0x00, // High part of packet lenght (entire frame, payload and TPDU included)
			0x16, // Low part of packet lenght (entire frame, payload and TPDU included)

			// COTP (ISO 8073 Header)
			0x11, // PDU Size Length
			0xE0, // CR - Connection Request ID
			0x00, // Dst Reference HI
			0x00, // Dst Reference LO
			0x00, // Src Reference HI
			0x01, // Src Reference LO
			0x00, // Class + Options Flags
			0xC0, // PDU Max Length ID
			0x01, // PDU Max Length HI
			0x0A, // PDU Max Length LO
			0xC1, // Src TSAP Identifier
			0x02, // Src TSAP Length (2 bytes)
			0x01, // Src TSAP HI (will be overwritten)
			0x00, // Src TSAP LO (will be overwritten)
			0xC2, // Dst TSAP Identifier
			0x02, // Dst TSAP Length (2 bytes)
			0x01, // Dst TSAP HI (will be overwritten)
			0x02  // Dst TSAP LO (will be overwritten)
		};

		// S7 Clear Session Password
		internal static byte[] S7_ClearSessionPassword = {
			0x03, 0x00, 0x00, 0x1d,
			0x02, 0xf0, 0x80, 0x32,
			0x07, 0x00, 0x00, 0x29,
			0x00, 0x00, 0x08, 0x00,
			0x04, 0x00, 0x01, 0x12,
			0x04, 0x11, 0x45, 0x02,
			0x00, 0x0a, 0x00, 0x00,
			0x00
		};

		// S7 COLD Start request
		internal static byte[] S7_ColdStartRequest = {
			0x03, 0x00, 0x00, 0x27,
			0x02, 0xf0, 0x80, 0x32,
			0x01, 0x00, 0x00, 0x0f,
			0x00, 0x00, 0x16, 0x00,
			0x00, 0x28, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00,
			0xfd, 0x00, 0x02, 0x43,
			0x20, 0x09, 0x50, 0x5f,
			0x50, 0x52, 0x4f, 0x47,
			0x52, 0x41, 0x4d
		};

		// S7 Get Block Info Request Header (contains also ISO Header and COTP Header)
		internal static byte[] S7_GetBlockInfoRequestHeader = {
			0x03, 0x00, 0x00, 0x25,
			0x02, 0xf0, 0x80, 0x32,
			0x07, 0x00, 0x00, 0x05,
			0x00, 0x00, 0x08, 0x00,
			0x0c, 0x00, 0x01, 0x12,
			0x04, 0x11, 0x43, 0x03,
			0x00, 0xff, 0x09, 0x00,
			0x08, 0x30,
			0x41, // Block Type
			0x30, 0x30, 0x30, 0x30, 0x30, // ASCII Block Number
			0x41
		};

		// Get Date/Time request
		internal static byte[] S7_GetDateTimeRequest = {
			0x03, 0x00, 0x00, 0x1d,
			0x02, 0xf0, 0x80, 0x32,
			0x07, 0x00, 0x00, 0x38,
			0x00, 0x00, 0x08, 0x00,
			0x04, 0x00, 0x01, 0x12,
			0x04, 0x11, 0x47, 0x01,
			0x00, 0x0a, 0x00, 0x00,
			0x00
		};

		// S7 Get PLC Status
		internal static byte[] S7_GetStatus = {
			0x03, 0x00, 0x00, 0x21,
			0x02, 0xf0, 0x80, 0x32,
			0x07, 0x00, 0x00, 0x2c,
			0x00, 0x00, 0x08, 0x00,
			0x08, 0x00, 0x01, 0x12,
			0x04, 0x11, 0x44, 0x01,
			0x00, 0xff, 0x09, 0x00,
			0x04, 0x04, 0x24, 0x00,
			0x00
		};

		// S7 HOT Start request
		internal static byte[] S7_HotStartRequest = {
			0x03, 0x00, 0x00, 0x25,
			0x02, 0xf0, 0x80, 0x32,
			0x01, 0x00, 0x00, 0x0c,
			0x00, 0x00, 0x14, 0x00,
			0x00, 0x28, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00,
			0xfd, 0x00, 0x00, 0x09,
			0x50, 0x5f, 0x50, 0x52,
			0x4f, 0x47, 0x52, 0x41,
			0x4d
		};

		// S7 PDU Negotiation Telegram (contains also ISO Header and COTP Header)
		internal static byte[] S7_PduNegotiationTelegram = {
			0x03, 0x00, 0x00, 0x19,
			0x02, 0xf0, 0x80, // TPKT + COTP (see above for info)
			0x32, 0x01, 0x00, 0x00,
			0x04, 0x00, 0x00, 0x08,
			0x00, 0x00, 0xf0, 0x00,
			0x00, 0x01, 0x00, 0x01,
			0x00, 0x1e        // PDU Length Requested = HI-LO Here Default 480 bytes
		};

		// S7 Read/Write Request Header (contains also ISO Header and COTP Header)
		internal static byte[] S7_ReadWriteRequestHeader = { // 31-35 bytes
			0x03,0x00,
			0x00,0x1f,       // Telegram Length (Data Size + 31 or 35)
			0x02,0xf0, 0x80, // COTP (see above for info)
			0x32,            // S7 Protocol ID
			0x01,            // Job Type
			0x00,0x00,       // Redundancy identification
			0x05,0x00,       // PDU Reference
			0x00,0x0e,       // Parameters Length
			0x00,0x00,       // Data Length = Size(bytes) + 4
			0x04,            // Function 4 Read Var, 5 Write Var
			0x01,            // Items count
			0x12,            // Var spec.
			0x0a,            // Length of remaining bytes
			0x10,            // Syntax ID
			(byte)S7Consts.S7WLByte,  // Transport Size idx=22
			0x00,0x00,       // Num Elements
			0x00,0x00,       // DB Number (if any, else 0)
			0x84,            // Area Type
			0x00,0x00,0x00,  // Area Offset

			// WR area
			0x00,            // Reserved
			0x04,            // Transport size
			0x00,0x00,       // Data Length * 8 (if not bit or timer or counter)
		};

		// Set Date/Time command
		internal static byte[] S7_SetDateTimeRequest = {
			0x03, 0x00, 0x00, 0x27,
			0x02, 0xf0, 0x80, 0x32,
			0x07, 0x00, 0x00, 0x89,
			0x03, 0x00, 0x08, 0x00,
			0x0e, 0x00, 0x01, 0x12,
			0x04, 0x11, 0x47, 0x02,
			0x00, 0xff, 0x09, 0x00,
			0x0a, 0x00,
			0x19, // Hi part of Year (idx=30)
			0x13, // Lo part of Year
			0x12, // Month
			0x06, // Day
			0x17, // Hour
			0x37, // Min
			0x13, // Sec
			0x00, 0x01 // ms + Day of week
		};

		// S7 Set Session Password
		internal static byte[] S7_SetSessionPassword = {
			0x03, 0x00, 0x00, 0x25,
			0x02, 0xf0, 0x80, 0x32,
			0x07, 0x00, 0x00, 0x27,
			0x00, 0x00, 0x08, 0x00,
			0x0c, 0x00, 0x01, 0x12,
			0x04, 0x11, 0x45, 0x01,
			0x00, 0xff, 0x09, 0x00,
			0x08,

			// 8 Char Encoded Password
			0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00
		};

		// SZL First telegram request
		internal static byte[] S7_SslFirstTelegram = {
			0x03, 0x00, 0x00, 0x21,
			0x02, 0xf0, 0x80, 0x32,
			0x07, 0x00, 0x00,
			0x05, 0x00, // Sequence out
			0x00, 0x08, 0x00,
			0x08, 0x00, 0x01, 0x12,
			0x04, 0x11, 0x44, 0x01,
			0x00, 0xff, 0x09, 0x00,
			0x04,
			0x00, 0x00, // ID (29)
			0x00, 0x00  // Index (31)
		};

		// SZL Next telegram request
		internal static byte[] S7_SslNextTelegram = {
			0x03, 0x00, 0x00, 0x21,
			0x02, 0xf0, 0x80, 0x32,
			0x07, 0x00, 0x00, 0x06,
			0x00, 0x00, 0x0c, 0x00,
			0x04, 0x00, 0x01, 0x12,
			0x08, 0x12, 0x44, 0x01,
			0x01, // Sequence
			0x00, 0x00, 0x00, 0x00,
			0x0a, 0x00, 0x00, 0x00
		};

		// S7 STOP request
		internal static byte[] S7_StopRequest = {
			0x03, 0x00, 0x00, 0x21,
			0x02, 0xf0, 0x80, 0x32,
			0x01, 0x00, 0x00, 0x0e,
			0x00, 0x00, 0x10, 0x00,
			0x00, 0x29, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x09,
			0x50, 0x5f, 0x50, 0x52,
			0x4f, 0x47, 0x52, 0x41,
			0x4d
		};

		// S7 Variable MultiRead Header
		internal static byte[] S7_VariableMultiReadHeader = {
			0x03,0x00,
			0x00,0x1f,       // Telegram Length
			0x02,0xf0, 0x80, // COTP (see above for info)
			0x32,            // S7 Protocol ID
			0x01,            // Job Type
			0x00,0x00,       // Redundancy identification
			0x05,0x00,       // PDU Reference
			0x00,0x0e,       // Parameters Length
			0x00,0x00,       // Data Length = Size(bytes) + 4
			0x04,            // Function 4 Read Var, 5 Write Var
			0x01             // Items count (idx 18)
		};

		// Header Size when Writing
		// S7 Variable MultiRead Item
		internal static byte[] S7_VariableMultiReadItem = {
			0x12,            // Var spec.
			0x0a,            // Length of remaining bytes
			0x10,            // Syntax ID
			(byte)S7Consts.S7WLByte,  // Transport Size idx=3
			0x00,0x00,       // Num Elements
			0x00,0x00,       // DB Number (if any, else 0)
			0x84,            // Area Type
			0x00,0x00,0x00   // Area Offset
		};

		// S7 Variable MultiWrite Header
		internal static byte[] S7_VariableMultiWriteHeader = {
			0x03,0x00,
			0x00,0x1f,       // Telegram Length
			0x02,0xf0, 0x80, // COTP (see above for info)
			0x32,            // S7 Protocol ID
			0x01,            // Job Type
			0x00,0x00,       // Redundancy identification
			0x05,0x00,       // PDU Reference
			0x00,0x0e,       // Parameters Length (idx 13)
			0x00,0x00,       // Data Length = Size(bytes) + 4 (idx 15)
			0x05,            // Function 5 Write Var
			0x01             // Items count (idx 18)
		};

		// S7 Variable MultiWrite Item (Param)
		internal static byte[] S7_VariableMultiWriteItem = {
			0x12,            // Var spec.
			0x0a,            // Length of remaining bytes
			0x10,            // Syntax ID
			(byte)S7Consts.S7WLByte,  // Transport Size idx=3
			0x00,0x00,       // Num Elements
			0x00,0x00,       // DB Number (if any, else 0)
			0x84,            // Area Type
			0x00,0x00,0x00,  // Area Offset
		};

		// TPKT + ISO COTP Header (Connection Oriented Transport Protocol)
		internal static byte[] TPKT_IsoHeader = { // 7 bytes
			0x03,0x00,
			0x00,0x1f,      // Telegram Length (Data Size + 31 or 35)
			0x02,0xf0,0x80  // COTP (see above for info)
		};

		#endregion Internal Fields
	}
}
